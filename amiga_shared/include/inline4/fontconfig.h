#ifndef INLINE4_FONTCONFIG_H
#define INLINE4_FONTCONFIG_H

/*
** This file was machine generated by idltool.py 54.8.
** Do not edit.
**
** It provides compatibility to AmigaOS 3.x style library
** calls by substituting functions.
*/

#include <exec/types.h>
#include <exec/exec.h>
#include <exec/interfaces.h>

#include <fontconfig.h>

/* Inline macros for Interface "main" */
#define FcConfigGetRescanInverval(config) IFontconfig->FcConfigGetRescanInverval((config))
#define FcConfigSetRescanInverval(config, rescanInterval) IFontconfig->FcConfigSetRescanInverval((config), (rescanInterval))
#define FcFreeTypeCharIndex(face, ucs4) IFontconfig->FcFreeTypeCharIndex((face), (ucs4))
#define FcFreeTypeCharSetAndSpacing(face, blanks, spacing) IFontconfig->FcFreeTypeCharSetAndSpacing((face), (blanks), (spacing))
#define FcFreeTypeCharSet(face, blanks) IFontconfig->FcFreeTypeCharSet((face), (blanks))
#define FcPatternGetFTFace(p, object, n, f) IFontconfig->FcPatternGetFTFace((p), (object), (n), (f))
#define FcPatternAddFTFace(p, object, f) IFontconfig->FcPatternAddFTFace((p), (object), (f))
#define FcFreeTypeQueryFace(face, file, id, blanks) IFontconfig->FcFreeTypeQueryFace((face), (file), (id), (blanks))
#define FcBlanksCreate() IFontconfig->FcBlanksCreate()
#define FcBlanksDestroy(b) IFontconfig->FcBlanksDestroy((b))
#define FcBlanksAdd(b, ucs4) IFontconfig->FcBlanksAdd((b), (ucs4))
#define FcBlanksIsMember(b, ucs4) IFontconfig->FcBlanksIsMember((b), (ucs4))
#define FcCacheDir(c) IFontconfig->FcCacheDir((c))
#define FcCacheCopySet(c) IFontconfig->FcCacheCopySet((c))
#define FcCacheSubdir(c, i) IFontconfig->FcCacheSubdir((c), (i))
#define FcCacheNumSubdir(c) IFontconfig->FcCacheNumSubdir((c))
#define FcCacheNumFont(c) IFontconfig->FcCacheNumFont((c))
#define FcDirCacheUnlink(dir, config) IFontconfig->FcDirCacheUnlink((dir), (config))
#define FcDirCacheValid(cache_file) IFontconfig->FcDirCacheValid((cache_file))
#define FcDirCacheClean(cache_dir, verbose) IFontconfig->FcDirCacheClean((cache_dir), (verbose))
#define FcCacheCreateTagFile(config) IFontconfig->FcCacheCreateTagFile((config))
#define FcDirCacheCreateUUID(dir, force, config) IFontconfig->FcDirCacheCreateUUID((dir), (force), (config))
#define FcDirCacheDeleteUUID(dir, config) IFontconfig->FcDirCacheDeleteUUID((dir), (config))
#define FcConfigHome() IFontconfig->FcConfigHome()
#define FcConfigEnableHome(enable) IFontconfig->FcConfigEnableHome((enable))
#define FcConfigGetFilename(config, url) IFontconfig->FcConfigGetFilename((config), (url))
#define FcConfigFilename(url) IFontconfig->FcConfigFilename((url))
#define FcConfigCreate() IFontconfig->FcConfigCreate()
#define FcConfigReference(config) IFontconfig->FcConfigReference((config))
#define FcConfigDestroy(config) IFontconfig->FcConfigDestroy((config))
#define FcConfigSetCurrent(config) IFontconfig->FcConfigSetCurrent((config))
#define FcConfigGetCurrent() IFontconfig->FcConfigGetCurrent()
#define FcConfigUptoDate(config) IFontconfig->FcConfigUptoDate((config))
#define FcConfigBuildFonts(config) IFontconfig->FcConfigBuildFonts((config))
#define FcConfigGetFontDirs(config) IFontconfig->FcConfigGetFontDirs((config))
#define FcConfigGetConfigDirs(config) IFontconfig->FcConfigGetConfigDirs((config))
#define FcConfigGetConfigFiles(config) IFontconfig->FcConfigGetConfigFiles((config))
#define FcConfigGetCache(config) IFontconfig->FcConfigGetCache((config))
#define FcConfigGetBlanks(config) IFontconfig->FcConfigGetBlanks((config))
#define FcConfigGetCacheDirs(config) IFontconfig->FcConfigGetCacheDirs((config))
#define FcConfigGetRescanInterval(config) IFontconfig->FcConfigGetRescanInterval((config))
#define FcConfigSetRescanInterval(config, rescanInterval) IFontconfig->FcConfigSetRescanInterval((config), (rescanInterval))
#define FcConfigGetFonts(config, set) IFontconfig->FcConfigGetFonts((config), (set))
#define FcConfigAcceptFont(config, font) IFontconfig->FcConfigAcceptFont((config), (font))
#define FcConfigAppFontAddFile(config, file) IFontconfig->FcConfigAppFontAddFile((config), (file))
#define FcConfigAppFontAddDir(config, dir) IFontconfig->FcConfigAppFontAddDir((config), (dir))
#define FcConfigAppFontClear(config) IFontconfig->FcConfigAppFontClear((config))
#define FcConfigSubstituteWithPat(config, p, p_pat, kind) IFontconfig->FcConfigSubstituteWithPat((config), (p), (p_pat), (kind))
#define FcConfigSubstitute(config, p, kind) IFontconfig->FcConfigSubstitute((config), (p), (kind))
#define FcConfigGetSysRoot(config) IFontconfig->FcConfigGetSysRoot((config))
#define FcConfigSetSysRoot(config, sysroot) IFontconfig->FcConfigSetSysRoot((config), (sysroot))
#define FcConfigFileInfoIterInit(config, iter) IFontconfig->FcConfigFileInfoIterInit((config), (iter))
#define FcConfigFileInfoIterNext(config, iter) IFontconfig->FcConfigFileInfoIterNext((config), (iter))
#define FcConfigFileInfoIterGet(config, iter, *name, *description, enabled) IFontconfig->FcConfigFileInfoIterGet((config), (iter), (*name), (*description), (enabled))
#define FcCharSetCreate() IFontconfig->FcCharSetCreate()
#define FcCharSetNew() IFontconfig->FcCharSetNew()
#define FcCharSetDestroy(fcs) IFontconfig->FcCharSetDestroy((fcs))
#define FcCharSetAddChar(fcs, ucs4) IFontconfig->FcCharSetAddChar((fcs), (ucs4))
#define FcCharSetDelChar(fcs, ucs4) IFontconfig->FcCharSetDelChar((fcs), (ucs4))
#define FcCharSetCopy(src) IFontconfig->FcCharSetCopy((src))
#define FcCharSetEqual(a, b) IFontconfig->FcCharSetEqual((a), (b))
#define FcCharSetIntersect(a, b) IFontconfig->FcCharSetIntersect((a), (b))
#define FcCharSetUnion(a, b) IFontconfig->FcCharSetUnion((a), (b))
#define FcCharSetSubtract(a, b) IFontconfig->FcCharSetSubtract((a), (b))
#define FcCharSetMerge(a, b, changed) IFontconfig->FcCharSetMerge((a), (b), (changed))
#define FcCharSetHasChar(fcs, ucs4) IFontconfig->FcCharSetHasChar((fcs), (ucs4))
#define FcCharSetCount(a) IFontconfig->FcCharSetCount((a))
#define FcCharSetIntersectCount(a, b) IFontconfig->FcCharSetIntersectCount((a), (b))
#define FcCharSetSubtractCount(a, b) IFontconfig->FcCharSetSubtractCount((a), (b))
#define FcCharSetIsSubset(a, b) IFontconfig->FcCharSetIsSubset((a), (b))
#define FcCharSetFirstPage(a, map[FC_CHARSET_MAP_SIZE], next) IFontconfig->FcCharSetFirstPage((a), (map[FC_CHARSET_MAP_SIZE]), (next))
#define FcCharSetNextPage(a, map[FC_CHARSET_MAP_SIZE], next) IFontconfig->FcCharSetNextPage((a), (map[FC_CHARSET_MAP_SIZE]), (next))
#define FcCharSetCoverage(a, page, result) IFontconfig->FcCharSetCoverage((a), (page), (result))
#define FcValuePrint(v) IFontconfig->FcValuePrint((v))
#define FcPatternPrint(p) IFontconfig->FcPatternPrint((p))
#define FcFontSetPrint(s) IFontconfig->FcFontSetPrint((s))
#define FcGetDefaultLangs() IFontconfig->FcGetDefaultLangs()
#define FcDefaultSubstitute(pattern) IFontconfig->FcDefaultSubstitute((pattern))
#define FcFileIsDir(file) IFontconfig->FcFileIsDir((file))
#define FcFileScan(set, dirs, cache, blanks, file, force) IFontconfig->FcFileScan((set), (dirs), (cache), (blanks), (file), (force))
#define FcDirScan(set, dirs, cache, blanks, dir, force) IFontconfig->FcDirScan((set), (dirs), (cache), (blanks), (dir), (force))
#define FcDirSave(set, dirs, dir) IFontconfig->FcDirSave((set), (dirs), (dir))
#define FcDirCacheLoad(dir, config, *cache_file) IFontconfig->FcDirCacheLoad((dir), (config), (*cache_file))
#define FcDirCacheRescan(dir, config) IFontconfig->FcDirCacheRescan((dir), (config))
#define FcDirCacheRead(dir, force, config) IFontconfig->FcDirCacheRead((dir), (force), (config))
#define FcDirCacheLoadFile(cache_file, file_stat) IFontconfig->FcDirCacheLoadFile((cache_file), (file_stat))
#define FcDirCacheUnload(cache) IFontconfig->FcDirCacheUnload((cache))
#define FcFreeTypeQuery(file, id, blanks, count) IFontconfig->FcFreeTypeQuery((file), (id), (blanks), (count))
#define FcFreeTypeQueryAll(file, id, blanks, count, set) IFontconfig->FcFreeTypeQueryAll((file), (id), (blanks), (count), (set))
#define FcFontSetCreate() IFontconfig->FcFontSetCreate()
#define FcFontSetDestroy(s) IFontconfig->FcFontSetDestroy((s))
#define FcFontSetAdd(s, font) IFontconfig->FcFontSetAdd((s), (font))
#define FcInitLoadConfig() IFontconfig->FcInitLoadConfig()
#define FcInitLoadConfigAndFonts() IFontconfig->FcInitLoadConfigAndFonts()
#define FcInit() IFontconfig->FcInit()
#define FcFini() IFontconfig->FcFini()
#define FcGetVersion() IFontconfig->FcGetVersion()
#define FcInitReinitialize() IFontconfig->FcInitReinitialize()
#define FcInitBringUptoDate() IFontconfig->FcInitBringUptoDate()
#define FcGetLangs() IFontconfig->FcGetLangs()
#define FcLangNormalize(lang) IFontconfig->FcLangNormalize((lang))
#define FcLangGetCharSet(lang) IFontconfig->FcLangGetCharSet((lang))
#define FcLangSetCreate() IFontconfig->FcLangSetCreate()
#define FcLangSetDestroy(ls) IFontconfig->FcLangSetDestroy((ls))
#define FcLangSetCopy(ls) IFontconfig->FcLangSetCopy((ls))
#define FcLangSetAdd(ls, lang) IFontconfig->FcLangSetAdd((ls), (lang))
#define FcLangSetDel(ls, lang) IFontconfig->FcLangSetDel((ls), (lang))
#define FcLangSetHasLang(ls, lang) IFontconfig->FcLangSetHasLang((ls), (lang))
#define FcLangSetCompare(lsa, lsb) IFontconfig->FcLangSetCompare((lsa), (lsb))
#define FcLangSetContains(lsa, lsb) IFontconfig->FcLangSetContains((lsa), (lsb))
#define FcLangSetEqual(lsa, lsb) IFontconfig->FcLangSetEqual((lsa), (lsb))
#define FcLangSetHash(ls) IFontconfig->FcLangSetHash((ls))
#define FcLangSetGetLangs(ls) IFontconfig->FcLangSetGetLangs((ls))
#define FcLangSetUnion(a, b) IFontconfig->FcLangSetUnion((a), (b))
#define FcLangSetSubtract(a, b) IFontconfig->FcLangSetSubtract((a), (b))
#define FcObjectSetCreate() IFontconfig->FcObjectSetCreate()
#define FcObjectSetAdd(os, object) IFontconfig->FcObjectSetAdd((os), (object))
#define FcObjectSetDestroy(os) IFontconfig->FcObjectSetDestroy((os))
#define FcObjectSetVaBuild(first, va) IFontconfig->FcObjectSetVaBuild((first), (va))
#define FcObjectSetBuild(first) IFontconfig->FcObjectSetBuild((first))
#define FcFontSetList(config, *sets, nsets, p, os) IFontconfig->FcFontSetList((config), (*sets), (nsets), (p), (os))
#define FcFontList(config, p, os) IFontconfig->FcFontList((config), (p), (os))
#define FcAtomicCreate(file) IFontconfig->FcAtomicCreate((file))
#define FcAtomicLock(atomic) IFontconfig->FcAtomicLock((atomic))
#define FcAtomicNewFile(atomic) IFontconfig->FcAtomicNewFile((atomic))
#define FcAtomicOrigFile(atomic) IFontconfig->FcAtomicOrigFile((atomic))
#define FcAtomicReplaceOrig(atomic) IFontconfig->FcAtomicReplaceOrig((atomic))
#define FcAtomicDeleteNew(atomic) IFontconfig->FcAtomicDeleteNew((atomic))
#define FcAtomicUnlock(atomic) IFontconfig->FcAtomicUnlock((atomic))
#define FcAtomicDestroy(atomic) IFontconfig->FcAtomicDestroy((atomic))
#define FcFontSetMatch(config, *sets, nsets, p, result) IFontconfig->FcFontSetMatch((config), (*sets), (nsets), (p), (result))
#define FcFontMatch(config, p, result) IFontconfig->FcFontMatch((config), (p), (result))
#define FcFontRenderPrepare(config, pat, font) IFontconfig->FcFontRenderPrepare((config), (pat), (font))
#define FcFontSetSort(config, *sets, nsets, p, trim, *csp, result) IFontconfig->FcFontSetSort((config), (*sets), (nsets), (p), (trim), (*csp), (result))
#define FcFontSort(config, p, trim, *csp, result) IFontconfig->FcFontSort((config), (p), (trim), (*csp), (result))
#define FcFontSetSortDestroy(fs) IFontconfig->FcFontSetSortDestroy((fs))
#define FcMatrixCopy(mat) IFontconfig->FcMatrixCopy((mat))
#define FcMatrixEqual(mat1, mat2) IFontconfig->FcMatrixEqual((mat1), (mat2))
#define FcMatrixMultiply(result, a, b) IFontconfig->FcMatrixMultiply((result), (a), (b))
#define FcMatrixRotate(m, c, s) IFontconfig->FcMatrixRotate((m), (c), (s))
#define FcMatrixScale(m, sx, sy) IFontconfig->FcMatrixScale((m), (sx), (sy))
#define FcMatrixShear(m, sh, sv) IFontconfig->FcMatrixShear((m), (sh), (sv))
#define FcNameRegisterObjectTypes(types, ntype) IFontconfig->FcNameRegisterObjectTypes((types), (ntype))
#define FcNameUnregisterObjectTypes(types, ntype) IFontconfig->FcNameUnregisterObjectTypes((types), (ntype))
#define FcNameGetObjectType(object) IFontconfig->FcNameGetObjectType((object))
#define FcNameRegisterConstants(consts, nconsts) IFontconfig->FcNameRegisterConstants((consts), (nconsts))
#define FcNameUnregisterConstants(consts, nconsts) IFontconfig->FcNameUnregisterConstants((consts), (nconsts))
#define FcNameGetConstant(string) IFontconfig->FcNameGetConstant((string))
#define FcNameGetConstantFor(string, object) IFontconfig->FcNameGetConstantFor((string), (object))
#define FcNameConstant(string, result) IFontconfig->FcNameConstant((string), (result))
#define FcNameParse(name) IFontconfig->FcNameParse((name))
#define FcNameUnparse(pat) IFontconfig->FcNameUnparse((pat))
#define FcPatternCreate() IFontconfig->FcPatternCreate()
#define FcPatternDuplicate(p) IFontconfig->FcPatternDuplicate((p))
#define FcPatternReference(p) IFontconfig->FcPatternReference((p))
#define FcPatternFilter(p, os) IFontconfig->FcPatternFilter((p), (os))
#define FcValueDestroy(v) IFontconfig->FcValueDestroy((v))
#define FcValueEqual(va, vb) IFontconfig->FcValueEqual((va), (vb))
#define FcValueSave(v) IFontconfig->FcValueSave((v))
#define FcPatternDestroy(p) IFontconfig->FcPatternDestroy((p))
#define FcPatternEqual(pa, pb) IFontconfig->FcPatternEqual((pa), (pb))
#define FcPatternEqualSubset(pa, pb, os) IFontconfig->FcPatternEqualSubset((pa), (pb), (os))
#define FcPatternHash(p) IFontconfig->FcPatternHash((p))
#define FcPatternAdd(p, object, value, append) IFontconfig->FcPatternAdd((p), (object), (value), (append))
#define FcPatternAddWeak(p, object, value, append) IFontconfig->FcPatternAddWeak((p), (object), (value), (append))
#define FcPatternGet(p, object, id, v) IFontconfig->FcPatternGet((p), (object), (id), (v))
#define FcPatternGetWithBinding(p, object, id, v, b) IFontconfig->FcPatternGetWithBinding((p), (object), (id), (v), (b))
#define FcPatternDel(p, object) IFontconfig->FcPatternDel((p), (object))
#define FcPatternRemove(p, object, id) IFontconfig->FcPatternRemove((p), (object), (id))
#define FcPatternAddInteger(p, object, i) IFontconfig->FcPatternAddInteger((p), (object), (i))
#define FcPatternAddDouble(p, object, d) IFontconfig->FcPatternAddDouble((p), (object), (d))
#define FcPatternAddString(p, object, s) IFontconfig->FcPatternAddString((p), (object), (s))
#define FcPatternAddMatrix(p, object, s) IFontconfig->FcPatternAddMatrix((p), (object), (s))
#define FcPatternAddCharSet(p, object, c) IFontconfig->FcPatternAddCharSet((p), (object), (c))
#define FcPatternAddBool(p, object, b) IFontconfig->FcPatternAddBool((p), (object), (b))
#define FcPatternAddLangSet(p, object, ls) IFontconfig->FcPatternAddLangSet((p), (object), (ls))
#define FcPatternAddRange(p, object, r) IFontconfig->FcPatternAddRange((p), (object), (r))
#define FcPatternGetInteger(p, object, n, i) IFontconfig->FcPatternGetInteger((p), (object), (n), (i))
#define FcPatternGetDouble(p, object, n, d) IFontconfig->FcPatternGetDouble((p), (object), (n), (d))
#define FcPatternGetString(p, object, n, s) IFontconfig->FcPatternGetString((p), (object), (n), (s))
#define FcPatternGetMatrix(p, object, n, *s) IFontconfig->FcPatternGetMatrix((p), (object), (n), (*s))
#define FcPatternGetCharSet(p, object, n, *c) IFontconfig->FcPatternGetCharSet((p), (object), (n), (*c))
#define FcPatternGetBool(p, object, n, b) IFontconfig->FcPatternGetBool((p), (object), (n), (b))
#define FcPatternGetLangSet(p, object, n, *ls) IFontconfig->FcPatternGetLangSet((p), (object), (n), (*ls))
#define FcPatternGetRange(p, object, id, *r) IFontconfig->FcPatternGetRange((p), (object), (id), (*r))
#define FcPatternVaBuild(p, va) IFontconfig->FcPatternVaBuild((p), (va))
#define FcPatternBuild(p, FC_ATTRIBUTE_SENTINEL0) IFontconfig->FcPatternBuild((p))
#define FcPatternFormat(pat, format) IFontconfig->FcPatternFormat((pat), (format))
#define FcRangeCreateDouble(begin, end) IFontconfig->FcRangeCreateDouble((begin), (end))
#define FcRangeCreateInteger(begin, end) IFontconfig->FcRangeCreateInteger((begin), (end))
#define FcRangeDestroy(range) IFontconfig->FcRangeDestroy((range))
#define FcRangeCopy(r) IFontconfig->FcRangeCopy((r))
#define FcRangeGetDouble(range, begin, end) IFontconfig->FcRangeGetDouble((range), (begin), (end))
#define FcPatternIterStart(pat, iter) IFontconfig->FcPatternIterStart((pat), (iter))
#define FcPatternIterNext(pat, iter) IFontconfig->FcPatternIterNext((pat), (iter))
#define FcPatternIterEqual(p1, i1, p2, i2) IFontconfig->FcPatternIterEqual((p1), (i1), (p2), (i2))
#define FcPatternFindIter(pat, iter, object) IFontconfig->FcPatternFindIter((pat), (iter), (object))
#define FcPatternIterIsValid(pat, iter) IFontconfig->FcPatternIterIsValid((pat), (iter))
#define FcPatternIterGetObject(pat, iter) IFontconfig->FcPatternIterGetObject((pat), (iter))
#define FcPatternIterValueCount(pat, iter) IFontconfig->FcPatternIterValueCount((pat), (iter))
#define FcPatternIterGetValue(pat, iter, id, v, b) IFontconfig->FcPatternIterGetValue((pat), (iter), (id), (v), (b))
#define FcWeightFromOpenType(ot_weight) IFontconfig->FcWeightFromOpenType((ot_weight))
#define FcWeightFromOpenTypeDouble(ot_weight) IFontconfig->FcWeightFromOpenTypeDouble((ot_weight))
#define FcWeightToOpenType(fc_weight) IFontconfig->FcWeightToOpenType((fc_weight))
#define FcWeightToOpenTypeDouble(fc_weight) IFontconfig->FcWeightToOpenTypeDouble((fc_weight))
#define FcStrCopy(s) IFontconfig->FcStrCopy((s))
#define FcStrCopyFilename(s) IFontconfig->FcStrCopyFilename((s))
#define FcStrPlus(s1, s2) IFontconfig->FcStrPlus((s1), (s2))
#define FcStrFree(s) IFontconfig->FcStrFree((s))
#define FcStrDowncase(s) IFontconfig->FcStrDowncase((s))
#define FcStrCmpIgnoreCase(s1, s2) IFontconfig->FcStrCmpIgnoreCase((s1), (s2))
#define FcStrCmp(s1, s2) IFontconfig->FcStrCmp((s1), (s2))
#define FcStrStrIgnoreCase(s1, s2) IFontconfig->FcStrStrIgnoreCase((s1), (s2))
#define FcStrStr(s1, s2) IFontconfig->FcStrStr((s1), (s2))
#define FcUtf8ToUcs4(src_orig, dst, len) IFontconfig->FcUtf8ToUcs4((src_orig), (dst), (len))
#define FcUtf8Len(string, len, nchar, wchar) IFontconfig->FcUtf8Len((string), (len), (nchar), (wchar))
#define FcUcs4ToUtf8(ucs4, dest[FC_UTF8_MAX_LEN]) IFontconfig->FcUcs4ToUtf8((ucs4), (dest[FC_UTF8_MAX_LEN]))
#define FcUtf16ToUcs4(src_orig, endian, dst, len) IFontconfig->FcUtf16ToUcs4((src_orig), (endian), (dst), (len))
#define FcUtf16Len(string, endian, len, nchar, wchar) IFontconfig->FcUtf16Len((string), (endian), (len), (nchar), (wchar))
#define FcStrBuildFilename(path, ) IFontconfig->FcStrBuildFilename((path), ())
#define FcStrDirname(file) IFontconfig->FcStrDirname((file))
#define FcStrBasename(file) IFontconfig->FcStrBasename((file))
#define FcStrSetCreate() IFontconfig->FcStrSetCreate()
#define FcStrSetMember(set, s) IFontconfig->FcStrSetMember((set), (s))
#define FcStrSetEqual(sa, sb) IFontconfig->FcStrSetEqual((sa), (sb))
#define FcStrSetAdd(set, s) IFontconfig->FcStrSetAdd((set), (s))
#define FcStrSetAddFilename(set, s) IFontconfig->FcStrSetAddFilename((set), (s))
#define FcStrSetDel(set, s) IFontconfig->FcStrSetDel((set), (s))
#define FcStrSetDestroy(set) IFontconfig->FcStrSetDestroy((set))
#define FcStrListCreate(set) IFontconfig->FcStrListCreate((set))
#define FcStrListFirst(list) IFontconfig->FcStrListFirst((list))
#define FcStrListNext(list) IFontconfig->FcStrListNext((list))
#define FcStrListDone(list) IFontconfig->FcStrListDone((list))
#define FcConfigParseAndLoad(config, file, complain) IFontconfig->FcConfigParseAndLoad((config), (file), (complain))
#define FcConfigParseAndLoadFromMemory(config, buffer, complain) IFontconfig->FcConfigParseAndLoadFromMemory((config), (buffer), (complain))

#endif /* INLINE4_FONTCONFIG_H */
